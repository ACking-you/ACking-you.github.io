<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C&#43;&#43;多线程 - 分类 - L_B__</title>
        <link>https://acking-you.gitee.io/categories/c&#43;&#43;%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
        <description>C&#43;&#43;多线程 - 分类 - L_B__</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 20 Aug 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://acking-you.gitee.io/categories/c&#43;&#43;%E5%A4%9A%E7%BA%BF%E7%A8%8B/" rel="self" type="application/rss+xml" /><item>
    <title>细粒度锁线程安全队列实现</title>
    <link>https://acking-you.gitee.io/posts/%E7%BB%86%E7%B2%92%E5%BA%A6%E9%94%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Sat, 20 Aug 2022 00:00:00 &#43;0000</pubDate><guid>https://acking-you.gitee.io/posts/%E7%BB%86%E7%B2%92%E5%BA%A6%E9%94%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://img-blog.csdnimg.cn/img_convert/c644e86b92d93fcc4173c23ce127e625.png#pic_center" referrerpolicy="no-referrer">
            </div>包含同步语义的简单实现 template &lt;typename T&gt; class ThreadSafeQueue { public: void Push(T new_value) { std::lock_guard&lt;std::mutex&gt; lk(m_mtx); m_queue.push(std::move(new_value)); m_cond.notify_one(); // 1 } void WaitAndPop(T &amp;value) // 2 { std::unique_lock&lt;std::mutex&gt; lk(m_mtx); m_cond.wait(lk, [this] { return !m_queue.empty(); }); value = std::move(m_queue.front()); m_queue.pop(); } std::shared_ptr&lt;T&gt; WaitAndPop() // 3 { std::unique_lock&lt;std::mutex&gt; lk(m_mtx); m_cond.wait(lk, [this] { return !m_queue.empty(); }); // 4 std::shared_ptr&lt;T&gt; res( std::make_shared&lt;T&gt;(std::move(m_queue.front()))); m_queue.pop(); return res; }]]></description>
</item>
<item>
    <title>async、packaged_task、promise、future的区别与使用</title>
    <link>https://acking-you.gitee.io/posts/asyncpackage_task%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Wed, 17 Aug 2022 00:00:00 &#43;0000</pubDate><guid>https://acking-you.gitee.io/posts/asyncpackage_task%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://img-blog.csdnimg.cn/img_convert/c592952aec4e1c875073f2a3d970cde5.png#pic_center" referrerpolicy="no-referrer">
            </div>使用方法 想要更详尽的介绍可以看看这本书，这几个函数牵扯到的内容是并发操作的同步，对应《C++并发编程实战》的第四章，这本书很难啃，有很多地方]]></description>
</item>
<item>
    <title>1.3-多线程控制的另一种姿势-条件变量(condition_variable), 信号量(semaphore)</title>
    <link>https://acking-you.gitee.io/posts/1.3-%E9%94%81%E9%87%8A%E6%94%BE%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%A7%BF%E5%8A%BF-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fcondition_variable-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphore/</link>
    <pubDate>Sun, 27 Mar 2022 00:00:00 &#43;0000</pubDate><guid>https://acking-you.gitee.io/posts/1.3-%E9%94%81%E9%87%8A%E6%94%BE%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%A7%BF%E5%8A%BF-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fcondition_variable-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphore/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://img-blog.csdnimg.cn/img_convert/385f4cc39feda8590ef42f86b38207ba.png#pic_center" referrerpolicy="no-referrer">
            </div>条件变量(C++11) 为什么要引入条件变量 我们先来看看一个由互斥量加锁构成的生产者消费者模型： // // Created by Alone on 2022-3-27. // #include &lt;iostream&gt;#include &lt;mutex&gt;#include &lt;deque&gt;#include &lt;thread&gt;std::mutex mtx; std::deque&lt;int&gt; q; // producer void task1(){ int i =]]></description>
</item>
<item>
    <title>1.1-创建线程(thread)、线程的汇聚(join)、线程的分离(detach)</title>
    <link>https://acking-you.gitee.io/posts/1.1-%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8Bthread%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%B1%87%E8%81%9Ajoin%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%86%E7%A6%BBdetach/</link>
    <pubDate>Wed, 02 Mar 2022 00:00:00 &#43;0000</pubDate><guid>https://acking-you.gitee.io/posts/1.1-%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8Bthread%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%B1%87%E8%81%9Ajoin%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%86%E7%A6%BBdetach/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://img-blog.csdnimg.cn/img_convert/c592952aec4e1c875073f2a3d970cde5.png#pic_center" referrerpolicy="no-referrer">
            </div>创建线程(thread)分析程序报错原因 头文件：include&lt;thread&gt; 理解线程的创建运行过程 你可以试着运行下面这段代码，]]></description>
</item>
<item>
    <title>1.2-线程安全的保证——互斥量mutex(锁)和原子变量atomic</title>
    <link>https://acking-you.gitee.io/posts/1.2-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E4%BF%9D%E8%AF%81%E4%BA%92%E6%96%A5%E9%87%8F%E9%94%81%E5%92%8C%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F/</link>
    <pubDate>Wed, 02 Mar 2022 00:00:00 &#43;0000</pubDate><guid>https://acking-you.gitee.io/posts/1.2-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E4%BF%9D%E8%AF%81%E4%BA%92%E6%96%A5%E9%87%8F%E9%94%81%E5%92%8C%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://img-blog.csdnimg.cn/img_convert/f58e3cdfd042ae0db6a192022d83a1ac.png#pic_center" referrerpolicy="no-referrer">
            </div>资源竞争引发的线程安全问题 有如下的代码： #include&lt;thread&gt;#include&lt;iostream&gt;int globalVariable = 0; void task(){ for (int i = 0; i &lt; 1000000; ++i) { ++globalVariable; } } int main(){ std::thread th1(task); std::thread th2(task); th1.join(); th2.join(); std::cout&lt;&lt;globalVariable; } 我们开了两个线程，一共执行了两次 task ，按理来]]></description>
</item>
</channel>
</rss>
